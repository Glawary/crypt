// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: crypt.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCryptoCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *CryptoFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListCryptoCurrenciesRequest) Reset() {
	*x = ListCryptoCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoCurrenciesRequest) ProtoMessage() {}

func (x *ListCryptoCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crypt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*ListCryptoCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_crypt_proto_rawDescGZIP(), []int{0}
}

func (x *ListCryptoCurrenciesRequest) GetFilter() *CryptoFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CryptoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoexchangeName string  `protobuf:"bytes,1,opt,name=cryptoexchange_name,json=cryptoexchangeName,proto3" json:"cryptoexchange_name,omitempty"`
	PriceFrom          float64 `protobuf:"fixed64,2,opt,name=price_from,json=priceFrom,proto3" json:"price_from,omitempty"`
	PriceTo            float64 `protobuf:"fixed64,3,opt,name=price_to,json=priceTo,proto3" json:"price_to,omitempty"`
	FindBrush          bool    `protobuf:"varint,4,opt,name=find_brush,json=findBrush,proto3" json:"find_brush,omitempty"`
}

func (x *CryptoFilter) Reset() {
	*x = CryptoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoFilter) ProtoMessage() {}

func (x *CryptoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_crypt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoFilter.ProtoReflect.Descriptor instead.
func (*CryptoFilter) Descriptor() ([]byte, []int) {
	return file_crypt_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoFilter) GetCryptoexchangeName() string {
	if x != nil {
		return x.CryptoexchangeName
	}
	return ""
}

func (x *CryptoFilter) GetPriceFrom() float64 {
	if x != nil {
		return x.PriceFrom
	}
	return 0
}

func (x *CryptoFilter) GetPriceTo() float64 {
	if x != nil {
		return x.PriceTo
	}
	return 0
}

func (x *CryptoFilter) GetFindBrush() bool {
	if x != nil {
		return x.FindBrush
	}
	return false
}

type ListCryptoCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []*CryptoCurrency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *ListCryptoCurrenciesResponse) Reset() {
	*x = ListCryptoCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoCurrenciesResponse) ProtoMessage() {}

func (x *ListCryptoCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crypt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*ListCryptoCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_crypt_proto_rawDescGZIP(), []int{2}
}

func (x *ListCryptoCurrenciesResponse) GetCurrencies() []*CryptoCurrency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type CryptoCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptocurrencyId     int32                 `protobuf:"varint,1,opt,name=cryptocurrency_id,json=cryptocurrencyId,proto3" json:"cryptocurrency_id,omitempty"`
	CryptocurrencyTicker string                `protobuf:"bytes,2,opt,name=cryptocurrency_ticker,json=cryptocurrencyTicker,proto3" json:"cryptocurrency_ticker,omitempty"`
	Data                 []*CryptoCurrencyInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CryptoCurrency) Reset() {
	*x = CryptoCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrency) ProtoMessage() {}

func (x *CryptoCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_crypt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrency.ProtoReflect.Descriptor instead.
func (*CryptoCurrency) Descriptor() ([]byte, []int) {
	return file_crypt_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoCurrency) GetCryptocurrencyId() int32 {
	if x != nil {
		return x.CryptocurrencyId
	}
	return 0
}

func (x *CryptoCurrency) GetCryptocurrencyTicker() string {
	if x != nil {
		return x.CryptocurrencyTicker
	}
	return ""
}

func (x *CryptoCurrency) GetData() []*CryptoCurrencyInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CryptoCurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoexchangeName string  `protobuf:"bytes,1,opt,name=cryptoexchange_name,json=cryptoexchangeName,proto3" json:"cryptoexchange_name,omitempty"`
	Olhcv              []byte  `protobuf:"bytes,2,opt,name=olhcv,proto3" json:"olhcv,omitempty"`
	Last               float64 `protobuf:"fixed64,3,opt,name=last,proto3" json:"last,omitempty"`
	Spread             float64 `protobuf:"fixed64,4,opt,name=spread,proto3" json:"spread,omitempty"`
}

func (x *CryptoCurrencyInfo) Reset() {
	*x = CryptoCurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrencyInfo) ProtoMessage() {}

func (x *CryptoCurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrencyInfo.ProtoReflect.Descriptor instead.
func (*CryptoCurrencyInfo) Descriptor() ([]byte, []int) {
	return file_crypt_proto_rawDescGZIP(), []int{4}
}

func (x *CryptoCurrencyInfo) GetCryptoexchangeName() string {
	if x != nil {
		return x.CryptoexchangeName
	}
	return ""
}

func (x *CryptoCurrencyInfo) GetOlhcv() []byte {
	if x != nil {
		return x.Olhcv
	}
	return nil
}

func (x *CryptoCurrencyInfo) GetLast() float64 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *CryptoCurrencyInfo) GetSpread() float64 {
	if x != nil {
		return x.Spread
	}
	return 0
}

var File_crypt_proto protoreflect.FileDescriptor

var file_crypt_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x72, 0x75, 0x73, 0x68, 0x22, 0x56, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6c, 0x68, 0x63, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x6f, 0x6c, 0x68, 0x63, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x32, 0x74, 0x0a, 0x0d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypt_proto_rawDescOnce sync.Once
	file_crypt_proto_rawDescData = file_crypt_proto_rawDesc
)

func file_crypt_proto_rawDescGZIP() []byte {
	file_crypt_proto_rawDescOnce.Do(func() {
		file_crypt_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypt_proto_rawDescData)
	})
	return file_crypt_proto_rawDescData
}

var file_crypt_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_crypt_proto_goTypes = []interface{}{
	(*ListCryptoCurrenciesRequest)(nil),  // 0: server.ListCryptoCurrenciesRequest
	(*CryptoFilter)(nil),                 // 1: server.CryptoFilter
	(*ListCryptoCurrenciesResponse)(nil), // 2: server.ListCryptoCurrenciesResponse
	(*CryptoCurrency)(nil),               // 3: server.CryptoCurrency
	(*CryptoCurrencyInfo)(nil),           // 4: server.CryptoCurrencyInfo
}
var file_crypt_proto_depIdxs = []int32{
	1, // 0: server.ListCryptoCurrenciesRequest.filter:type_name -> server.CryptoFilter
	3, // 1: server.ListCryptoCurrenciesResponse.currencies:type_name -> server.CryptoCurrency
	4, // 2: server.CryptoCurrency.data:type_name -> server.CryptoCurrencyInfo
	0, // 3: server.CryptoService.ListCryptoCurrencies:input_type -> server.ListCryptoCurrenciesRequest
	2, // 4: server.CryptoService.ListCryptoCurrencies:output_type -> server.ListCryptoCurrenciesResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_crypt_proto_init() }
func file_crypt_proto_init() {
	if File_crypt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crypt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crypt_proto_goTypes,
		DependencyIndexes: file_crypt_proto_depIdxs,
		MessageInfos:      file_crypt_proto_msgTypes,
	}.Build()
	File_crypt_proto = out.File
	file_crypt_proto_rawDesc = nil
	file_crypt_proto_goTypes = nil
	file_crypt_proto_depIdxs = nil
}
